// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: vote.proto

package vote

import (
	context "context"
	election "genprotos/election"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VoteService_CreateVote_FullMethodName  = "/protos.VoteService/CreateVote"
	VoteService_DeleteVote_FullMethodName  = "/protos.VoteService/DeleteVote"
	VoteService_UpdateVote_FullMethodName  = "/protos.VoteService/UpdateVote"
	VoteService_GetByIdVote_FullMethodName = "/protos.VoteService/GetByIdVote"
	VoteService_GetAllVotes_FullMethodName = "/protos.VoteService/GetAllVotes"
)

// VoteServiceClient is the client API for VoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteServiceClient interface {
	CreateVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*election.Void, error)
	DeleteVote(ctx context.Context, in *election.ById, opts ...grpc.CallOption) (*election.Void, error)
	UpdateVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*election.Void, error)
	GetByIdVote(ctx context.Context, in *election.ById, opts ...grpc.CallOption) (*Vote, error)
	GetAllVotes(ctx context.Context, in *election.Void, opts ...grpc.CallOption) (*GetAllVote, error)
}

type voteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteServiceClient(cc grpc.ClientConnInterface) VoteServiceClient {
	return &voteServiceClient{cc}
}

func (c *voteServiceClient) CreateVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*election.Void, error) {
	out := new(election.Void)
	err := c.cc.Invoke(ctx, VoteService_CreateVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) DeleteVote(ctx context.Context, in *election.ById, opts ...grpc.CallOption) (*election.Void, error) {
	out := new(election.Void)
	err := c.cc.Invoke(ctx, VoteService_DeleteVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) UpdateVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*election.Void, error) {
	out := new(election.Void)
	err := c.cc.Invoke(ctx, VoteService_UpdateVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) GetByIdVote(ctx context.Context, in *election.ById, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, VoteService_GetByIdVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) GetAllVotes(ctx context.Context, in *election.Void, opts ...grpc.CallOption) (*GetAllVote, error) {
	out := new(GetAllVote)
	err := c.cc.Invoke(ctx, VoteService_GetAllVotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServiceServer is the server API for VoteService service.
// All implementations must embed UnimplementedVoteServiceServer
// for forward compatibility
type VoteServiceServer interface {
	CreateVote(context.Context, *Vote) (*election.Void, error)
	DeleteVote(context.Context, *election.ById) (*election.Void, error)
	UpdateVote(context.Context, *Vote) (*election.Void, error)
	GetByIdVote(context.Context, *election.ById) (*Vote, error)
	GetAllVotes(context.Context, *election.Void) (*GetAllVote, error)
	mustEmbedUnimplementedVoteServiceServer()
}

// UnimplementedVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoteServiceServer struct {
}

func (UnimplementedVoteServiceServer) CreateVote(context.Context, *Vote) (*election.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVote not implemented")
}
func (UnimplementedVoteServiceServer) DeleteVote(context.Context, *election.ById) (*election.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (UnimplementedVoteServiceServer) UpdateVote(context.Context, *Vote) (*election.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVote not implemented")
}
func (UnimplementedVoteServiceServer) GetByIdVote(context.Context, *election.ById) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdVote not implemented")
}
func (UnimplementedVoteServiceServer) GetAllVotes(context.Context, *election.Void) (*GetAllVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVotes not implemented")
}
func (UnimplementedVoteServiceServer) mustEmbedUnimplementedVoteServiceServer() {}

// UnsafeVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteServiceServer will
// result in compilation errors.
type UnsafeVoteServiceServer interface {
	mustEmbedUnimplementedVoteServiceServer()
}

func RegisterVoteServiceServer(s grpc.ServiceRegistrar, srv VoteServiceServer) {
	s.RegisterService(&VoteService_ServiceDesc, srv)
}

func _VoteService_CreateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).CreateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_CreateVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).CreateVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(election.ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_DeleteVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).DeleteVote(ctx, req.(*election.ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_UpdateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).UpdateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_UpdateVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).UpdateVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_GetByIdVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(election.ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).GetByIdVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_GetByIdVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).GetByIdVote(ctx, req.(*election.ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_GetAllVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(election.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).GetAllVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_GetAllVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).GetAllVotes(ctx, req.(*election.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// VoteService_ServiceDesc is the grpc.ServiceDesc for VoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.VoteService",
	HandlerType: (*VoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVote",
			Handler:    _VoteService_CreateVote_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _VoteService_DeleteVote_Handler,
		},
		{
			MethodName: "UpdateVote",
			Handler:    _VoteService_UpdateVote_Handler,
		},
		{
			MethodName: "GetByIdVote",
			Handler:    _VoteService_GetByIdVote_Handler,
		},
		{
			MethodName: "GetAllVotes",
			Handler:    _VoteService_GetAllVotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vote.proto",
}
